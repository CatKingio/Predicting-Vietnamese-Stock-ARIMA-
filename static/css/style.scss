@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap');

/* Global Styles */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  text-decoration: none;
}

html {
  $black: #303030;
  // $grey: #909090;
  // $off-white: #EDEEE9;
  // $code: #D8DBCE;
  $code: #ffffff;
  $grey: #efeee700;
  $off-white: #000000;
  position: relative;
  scroll-behavior: smooth;
  $sans-serif: 'Inter', sans-serif;
  background-color: $off-white;

  h1 {
    margin-right: auto ;
    padding: 20px;
    color: $code;

  }

  body {
    background-color: $off-white;
    color: $black;
    font-family: $sans-serif;
    min-height: 100vh;
    width: 100%;
    padding: 2.5vh 5vw;

    @media (min-width: 768px) {
      padding: 2.5vh 10vw;
    }

    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;



    a {
      text-decoration: underline;
      color: $black;
    }

    code {
      font-size: 1rem;
      padding: 0 0.5rem;
      background-color: $code;
    }

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;

    }

    .result {
      width: 100%;
      .container {
        border-radius: 0 10px 10px 10px;
      }
      h1 {
        margin-right: auto ;
        width: fit-content;
        color: $black;
        background-color: $code;
        padding: 20px 20px 0;
        border-radius: 10px 10px 0 0;
      }
    
    }

    .processing {
      width: 100%;
      .container {
        border-radius: 0 10px 10px 10px;
      }
      h1 {
        margin-right: auto ;
        width: fit-content;
        color: $black;
        background-color: $code;
        padding: 20px 20px 0;
        border-radius: 10px 10px 0 0;
      }
    

    }

    .container {
      width: 100%;
      // box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px;
      box-shadow: rgba(240, 46, 170, 0.4) 5px 5px, rgba(240, 46, 170, 0.3) 10px 10px, rgba(240, 46, 170, 0.2) 15px 15px, rgba(240, 46, 170, 0.1) 20px 20px, rgba(240, 46, 170, 0.05) 25px 25px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 30px;
      padding: 2rem 2rem 2rem;
      background-color: $code;
      flex-wrap: wrap;
      margin-bottom: 90px;
      border-radius: 10px;
      overflow: hidden;

      @media (min-width: 768px) {
        flex-direction: row;
        align-items: center;

      }

      .cta-form {
        margin-bottom: 2rem;
        text-align: center;

        @media (min-width: 768px) {
          margin-bottom: 0;
          margin-right: 2rem;
          text-align: left;
        }

        h2 {
          font-size: 1.5rem;
          width: 100%;
          max-width: 25ch;
          margin: 0 auto;
          text-align: center;

          @media (min-width: 768px) {
            text-align: left;
            margin: 0;
          }
        }

        p {
          margin-top: 1rem;
          font-size: 1rem;
          width: 100%;
          max-width: 24ch;
        }
      }

      .dataframe {
        width: 100%;
        max-width: 750px;
        max-height: 90vh;
        overflow-x: auto;

        @media (min-width: 768px) {
          font-size: 1.3rem;
        }
      }

      .flexbox {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
      }

      .chart {
        width: 100%;
        // @media (min-width: 768px) {
        //   width: 50%;
        // }
      }

      .chart2 {
        width: 100%;

        @media (min-width: 768px) {
          width: 49%;
        }
      }

    }

  }

  // Before someone yells at me for my improper use of SCSS‚Äî I know‚Äî 
  // This isn't using SCSS's 'cascading' methodology. The form's styling is outside of the body tag.
  // I'm just doing it this way so I can minimize non-relevant code. üòÅ
  /* #################### ########################### #################### */
  /* #################### All form-related CSS below. #################### */
  /* #################### ########################### #################### */

  .form {
    align-self: center;
  }

  button {
    width: clamp(120px, 50vw, 420px);
    height: 2.5rem;
    border-radius: 2px;
    border: 1px solid $black;
    transition: all 250ms;

    &:focus,
    &:hover {
      outline: none;
      border: 1px solid $grey;
    }
  }
  .button_home {
    width: 2.5rem;
    display:flex;
    justify-content: center;
    align-items: center;
    height: 2.5rem;
    border-radius: 10px;
    border: 1px solid $black;
    position: fixed;
    bottom:7% ;
    background-color: #ffffff;
    right: 5%;
  }
  // I would use the BEM method here for declaring styles,
  // but for the sake of clarity, I decided not to.*

  // Just some basic input field styling.
  .form__input {
    width: clamp(120px, 50vw, 420px);
    height: 2.5rem;
    padding: 0 1.25rem;
    border: 1px solid $black;
    border-radius: 2px;
    margin: 0.625rem auto;
    transition: all 250ms;

    @media (min-width: 768px) {
      width: clamp(120px, 35vw, 420px);
    }

    // This is basically saying when the form__input class is in focus
    &:focus {
      outline: none;
      border-top-color: rgba(0, 0, 0, 0.1);
    }

    // How to read this:
    /* When the input field (.form__input) is in focus, 
         transform the .form__label and change colors*/
    /* ALSO, if the input field's placeholder is NOT shown (when the input field has content),
         transform the .form__label and change colors. */
    &:focus+.form__label,
    &:not(:placeholder-shown)+.form__label {
      transform: translateY(-4.50rem) scale(1);
      color: $black;
    }

    /* THIS PART IS IMPORTANT!! */
    /* The block below hides the placeholder entirely. */
    /* For all intents and purposes, the placeholder no longer exists. */
    /* What shows on the input field is only the label*. */
    /* HOWEVER, the input fields still recognizes that the placeholder exists!*/
    /* The placeholder is just invisible. We need the placeholder to exist for
         some weird CSS stuff. If we skip this, we can't make it CSS-only. */
    &::placeholder {
      display: none;
      color: $grey;

      // Prevents users from highlighting the placeholder.
      -webkit-user-select: none;
      /* Safari */
      -ms-user-select: none;
      /* IE 10 and IE 11 */
      user-select: none;
      /* Standard syntax */
    }

    // How to read this:
    /* When the placeholder is NOT shown,
         style the top border. */
    /* This makes the top border fade-out when the placeholder disappears. */
    &:not(:placeholder-shown) {
      border-top-color: rgba(0, 0, 0, 0.5);
    }
  }

  .form__label {
    font-size: 1rem;
    color: $black;
    display: block;

    /* Moves the label on TOP of the placeholder */
    /* You'll need to change this as needed */
    transform: translate(1.25rem, -2.5rem);
    transform-origin: 0 0;
    /* Used later for transitions */
    transition: all 500ms;

    // Prevents users from highlighting the label.
    -webkit-user-select: none;
    /* Safari */
    -ms-user-select: none;
    /* IE 10 and IE 11 */
    user-select: none;
    /* Standard syntax */

    /* THIS PART IS IMPORTANT! */
    /* This line prevents the label from being selected.*/
    /* This is crucial because if this line doesn't exist, users can
         click on the label, instead of the input field. That's bad UX! */
    pointer-events: none;
  }

}